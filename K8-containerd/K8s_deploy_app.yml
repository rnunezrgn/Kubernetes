# --- Deploy Test Apps & Run All Tests ---
- name: Deploy and Test Kubernetes Apps
  hosts: k8smasters
  become: true
  vars:
    node_ip: ""

  tasks:
    - name: Clean up existing test apps (ignore errors if not present)
      ansible.builtin.shell: |
        kubectl delete deploy nginx hello-world wordpress || true
        kubectl delete svc nginx hello-world wordpress || true
        kubectl delete pvc wp-pvc || true
      ignore_errors: true

    - name: Create test apps manifest
      ansible.builtin.copy:
        dest: /root/test-apps.yaml
        mode: '0644'
        content: |
          # NGINX
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: nginx
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: nginx
            template:
              metadata:
                labels:
                  app: nginx
              spec:
                tolerations:
                - key: "node-role.kubernetes.io/control-plane"
                  operator: "Exists"
                  effect: "NoSchedule"
                containers:
                - name: nginx
                  image: nginx:latest
                  ports:
                  - containerPort: 80
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: nginx
          spec:
            type: NodePort
            selector:
              app: nginx
            ports:
            - port: 80
              targetPort: 80
              nodePort: 30080

          # HELLO-WORLD
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: hello-world
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: hello-world
            template:
              metadata:
                labels:
                  app: hello-world
              spec:
                tolerations:
                - key: "node-role.kubernetes.io/control-plane"
                  operator: "Exists"
                  effect: "NoSchedule"
                containers:
                - name: hello-world
                  image: hashicorp/http-echo
                  args:
                    - "-text=Hello Kubernetes!"
                  ports:
                  - containerPort: 5678
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: hello-world
          spec:
            type: NodePort
            selector:
              app: hello-world
            ports:
            - port: 5678
              targetPort: 5678
              nodePort: 30567

          # WORDPRESS
          ---
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: wp-pvc
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 1Gi
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: wordpress
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: wordpress
            template:
              metadata:
                labels:
                  app: wordpress
              spec:
                tolerations:
                - key: "node-role.kubernetes.io/control-plane"
                  operator: "Exists"
                  effect: "NoSchedule"
                containers:
                - name: wordpress
                  image: wordpress:latest
                  env:
                  - name: WORDPRESS_DB_HOST
                    value: mysql
                  - name: WORDPRESS_DB_PASSWORD
                    value: example
                  ports:
                  - containerPort: 80
                  volumeMounts:
                  - name: wordpress-persistent-storage
                    mountPath: /var/www/html
                volumes:
                - name: wordpress-persistent-storage
                  persistentVolumeClaim:
                    claimName: wp-pvc
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: wordpress
          spec:
            type: NodePort
            selector:
              app: wordpress
            ports:
            - port: 80
              targetPort: 80
              nodePort: 30800

    - name: Apply test applications
      ansible.builtin.shell: kubectl apply -f /root/test-apps.yaml
      register: apply_result
      failed_when: apply_result.rc != 0

    - name: Wait for deployments to be ready
      ansible.builtin.shell: |
        kubectl rollout status deployment/nginx --timeout=120s
        kubectl rollout status deployment/hello-world --timeout=120s
        kubectl rollout status deployment/wordpress --timeout=300s

    - name: Test service endpoints inside cluster
      ansible.builtin.shell: |
        kubectl run tmp-test --rm -i --restart=Never --image=busybox -- \
          wget -qO- http://nginx:80
        kubectl run tmp-test2 --rm -i --restart=Never --image=busybox -- \
          wget -qO- http://hello-world:5678
      register: internal_test_results
      failed_when: "'Hello Kubernetes!' not in internal_test_results.stdout"

    - name: Get NodePorts
      ansible.builtin.shell: kubectl get svc {{ item }} -o jsonpath='{.spec.ports[0].nodePort}'
      loop:
        - nginx
        - hello-world
        - wordpress
      register: nodeports

    - name: Find worker node IP (fallback to master)
      ansible.builtin.shell: |
        kubectl get nodes -o jsonpath='{range .items[?(@.metadata.labels."node-role.kubernetes.io/worker"=="")]}{@.status.addresses[?(@.type=="InternalIP")].address}{"\n"}{end}' | head -n 1
      register: worker_ip
      failed_when: false

    - name: Set node_ip fact
      ansible.builtin.set_fact:
        node_ip: "{{ worker_ip.stdout if worker_ip.stdout|length > 0 else ansible_default_ipv4.address }}"
        nginx_port: "{{ nodeports.results[0].stdout }}"
        hello_port: "{{ nodeports.results[1].stdout }}"
        wp_port: "{{ nodeports.results[2].stdout }}"

    - name: Test from inside cluster node IP
      ansible.builtin.shell: |
        curl -s http://{{ node_ip }}:{{ nginx_port }}
        curl -s http://{{ node_ip }}:{{ hello_port }}
        curl -s http://{{ node_ip }}:{{ wp_port }}
      register: external_test_results
      failed_when: external_test_results.rc != 0
