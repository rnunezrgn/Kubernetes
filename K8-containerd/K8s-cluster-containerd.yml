---
- name: Kubernetes Cluster Setup (All Nodes)
  hosts: rhel9k8s
  become: true
  vars:
    pod_network_cidr: "10.216.0.0/16"

  tasks:
    # RHEL Registration & Repos
    - name: Register RHEL subscription
      community.general.redhat_subscription:
        username: "{{ myusername }}"
        password: "{{ mypassword }}"
        auto_attach: true
        state: present

    - name: Enable required RHEL repos
      ansible.builtin.shell: |
        subscription-manager repos --enable=rhel-9-for-x86_64-baseos-rpms \
                                   --enable=rhel-9-for-x86_64-appstream-rpms \
                                   --enable codeready-builder-for-rhel-9-x86_64-rpms

    - name: Ensure redhat.repo file is present
      ansible.builtin.stat:
        path: /etc/yum.repos.d/redhat-rhui.repo
      register: redhat_rhui_repo

    - name: Fail if redhat.repo does not exist
      ansible.builtin.fail:
        msg: "redhat.repo file is missing. Repositories may not be enabled correctly."
      when: not redhat_rhui_repo.stat.exists

    # System Configuration
    - name: Disable SELinux
      ansible.posix.selinux:
        state: disabled

    - name: Disable swap
      ansible.builtin.shell: |
        swapoff -a
        sed -i.bak '/ swap /s/^/#/' /etc/fstab

    - name: Load br_netfilter module immediately
      ansible.builtin.modprobe:
        name: br_netfilter
        state: present

    - name: Ensure br_netfilter loads on boot
      ansible.builtin.copy:
        dest: /etc/modules-load.d/br_netfilter.conf
        content: "br_netfilter\n"
        mode: '0644'

    - name: Configure sysctl for Kubernetes networking
      ansible.builtin.copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
        mode: '0644'

    - name: Apply sysctl settings
      command: sysctl --system

    # Install Required Packages
    - name: Import EPEL GPG key
      ansible.builtin.rpm_key:
        state: present
        key: https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-9

    - name: Install EPEL release
      ansible.builtin.dnf:
        name: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm"
        state: present
        disablerepo:
        - kubernetes
        - crio-o

    - name: Install Kubernetes tools
      ansible.builtin.dnf:
        name:
          - lsof 
          - kubelet
          - kubeadm
          - kubectl
          - podman
          - buildah
          - skopeo
          - epel-release
        state: present

    - name: Ensure docker-ce-repo file is present
      ansible.builtin.stat:
        path: /etc/yum.repos.d/docker-ce.repo
      register: my-docker-ce-repo

    - name: Add Docker CE repository (provides containerd.io) if /etc/yum.repos.d/docker-ce.repo file does not exist
#      ansible.builtin.shell: dnf config-manager --add-repo=https://download.docker.com/linux/rhel/docker-ce.repo
      ansible.builtin.shell: dnf config-manager --add-repo=https://download.docker.com/linux/rhel/9/x86_64/stable
      when: not my-docker-ce-repo.stat.exists

    - name: Install containerd
      ansible.builtin.dnf:
        name: containerd.io
        state: present
          
    - name: Configure containerd
      ansible.builtin.shell: |
        mkdir -p /etc/containerd
        containerd config default > /etc/containerd/config.toml
        sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
        systemctl restart containerd
        systemctl enable containerd
        
    - name: Unmask and enable kubelet
      ansible.builtin.systemd:
        name: kubelet
        masked: no
        enabled: yes
        state: started

# --- Control Plane Initialization ---
- name: Initialize Kubernetes Control Plane
  hosts: k8smasters
  become: true
  vars:
    pod_network_cidr: "10.216.0.0/16"

  tasks:
    - name: Check if cluster already initialized
      stat:
        path: /etc/kubernetes/admin.conf
      register: k8s_initialized

    - name: Initialize Kubernetes cluster
      command: kubeadm init --pod-network-cidr={{ pod_network_cidr }}
      when: not k8s_initialized.stat.exists
      register: kubeadm_output

    - name: Setup kubeconfig for root
      shell: |
        mkdir -p /root/.kube
        cp -i /etc/kubernetes/admin.conf /root/.kube/config
        chown root:root /root/.kube/config
      when: not k8s_initialized.stat.exists

    - name: Setup kubeconfig for ec2-user
      become_user: ec2-user
      shell: |
        mkdir -p /home/ec2-user/.kube
        cp /etc/kubernetes/admin.conf /home/ec2-user/.kube/config
        chown ec2-user:ec2-user /home/ec2-user/.kube/config
      when: not k8s_initialized.stat.exists

    - name: Deploy Flannel CNI
      shell: |
        kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
      when: not k8s_initialized.stat.exists

    - name: Wait for Kubernetes API to become available
      uri:
        url: https://localhost:6443/healthz
        method: GET
        status_code: 200
        validate_certs: false
      register: result
      until: result.status == 200
      retries: 10
      delay: 10

    - name: Upload certificate key (for control-plane join if needed)
      shell: kubeadm init phase upload-certs --upload-certs
      register: cert_key_output
      when: not k8s_initialized.stat.exists
      changed_when: false

    - name: Generate kubeadm join command with cert key
      shell: |
        kubeadm token create --print-join-command --certificate-key {{ cert_key_output.stdout_lines[-1] }}
      register: join_cmd
      when: not k8s_initialized.stat.exists

    - name: Get join command from control plane
      command: kubeadm token create --print-join-command
      register: join_cmd
      changed_when: false
    
    - name: Set join command fact
      set_fact:
        join_command: "{{ join_cmd.stdout }}"

# --- Worker Node Join ---
- name: Join Worker Nodes to the Cluster
  hosts: k8sworkers
  become: true
  vars:
    join_command: "{{ hostvars[groups['k8smasters'][0]].join_command }}"

  tasks:
    - name: Load br_netfilter module immediately
      ansible.builtin.modprobe:
        name: br_netfilter
        state: present

    - name: Ensure br_netfilter loads on boot
      ansible.builtin.copy:
        dest: /etc/modules-load.d/br_netfilter.conf
        content: "br_netfilter\n"
        mode: '0644'

    - name: Configure sysctl for Kubernetes networking
      ansible.builtin.copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
        mode: '0644'

    - name: Apply sysctl settings
      command: sysctl --system

#    - name: Ensure kubelet is enabled and started
#      ansible.builtin.systemd:
#        name: kubelet
#        enabled: yes
#        state: started
#        masked: no

    - name: Stop and mask kubelet to free port 10250
      ansible.builtin.systemd:
        name: kubelet
        state: stopped
        enabled: no
        masked: yes
        
    - name: Reset previous kubeadm state
      shell: |
        kubeadm reset -f
        rm -rf /etc/kubernetes/
        rm -rf /var/lib/kubelet/*
        rm -rf /var/lib/cni/
        rm -rf /etc/cni/
        systemctl daemon-reexec
        systemctl restart containerd
      ignore_errors: yes
    
    - name: Join node to cluster
      shell: "{{ join_command }} --ignore-preflight-errors=Hostname"
      args:
        executable: /bin/bash
      register: join_result
      failed_when: "'[ERROR' in join_result.stderr"
    
    - name: Unmask and enable kubelet after join
      systemd:
        name: kubelet
        state: restarted
        enabled: yes
        masked: no
...