---
- name: Setup Podman and Kubernetes on RHEL 9
  hosts: rhel9k8s
  become: true
  vars:
    myusername: ""
    mypassword: ""
    mystatus: "present"
    crio_version: "1.29"
    crio_repo_baseurl: "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/${crio_version}:/rh9/$basearch/"
    crio_gpg_key: "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/${crio_version}:/rh9/$basearch/repodata/repomd.xml.key"
  
  tasks:
    - name: Register and subscribe the system
      community.general.redhat_subscription:
        username: "{{ myusername }}"
        password: "{{ mypassword }}"
        state: "{{ mystatus }}"
        
    - name: Upgrading all RHEL packages to Latest !!!
      ansible.builtin.dnf:
        name: '*'
        state: latest
        enablerepo:
          - appstream
          - baseos
          - extras
        
    - name: Install pip if not present
      ansible.builtin.dnf:
        name: "{{ item }}"
        state: present
        disablerepo:
        - kubernetes
        - crio-o
        
      become: true
      loop:
        - python3
        - python3-pip
        - python3-firewall
        - firewalld
 
    - name: Add Docker CE repository (provides containerd.io)
      ansible.builtin.yum_repository:
        name: docker-ce
        description: Docker CE Stable - provides containerd.io
        baseurl: https://download.docker.com/linux/centos/docker-ce.repo
        enabled: yes
        gpgcheck: yes
        gpgkey: https://download.docker.com/linux/centos/gpg
        
    - name: Install containerd from CRI-O repo
      ansible.builtin.dnf:
        name: containerd.io
        state: present

    - name: Create containerd config directory
      ansible.builtin.file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Generate default containerd config
      ansible.builtin.command: containerd config default
      register: containerd_config
      changed_when: false

    - name: Overwrite containerd config.toml and Set SystemdCgroup = true
      ansible.builtin.copy:
        dest: /etc/containerd/config.toml
        content: |
          #   Copyright 2018-2022 Docker Inc.

          #   Licensed under the Apache License, Version 2.0 (the "License");
          #   you may not use this file except in compliance with the License.
          #   You may obtain a copy of the License at

          #       http://www.apache.org/licenses/LICENSE-2.0

          #   Unless required by applicable law or agreed to in writing, software
          #   distributed under the License is distributed on an "AS IS" BASIS,
          #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          #   See the License for the specific language governing permissions and
          #   limitations under the License.

          enabled_plugins = ["cri"]
          [plugins."io.containerd.grpc.v1.cri".containerd]
            endpoint = "unix:///var/run/containerd/containerd.sock"

          #disabled_plugins = ["cri"]

          #root = "/var/lib/containerd"
          #state = "/run/containerd"
          #subreaper = true
          #oom_score = 0

          #[grpc]
          #  address = "/run/containerd/containerd.sock"
          #  uid = 0
          #  gid = 0

          #[debug]
          #  address = "/run/containerd/debug.sock"
          #  uid = 0
          #  gid = 0
          #  level = "info"
          SystemdCgroup = true
        owner: root
        group: root
        mode: '0644'

    - name: Enable and start containerd to apply config
      ansible.builtin.systemd:
        name: containerd
        enabled: true
        state: restarted
        daemon_reload: true
        
    - name: Import EPEL GPG key for RHEL 9
      ansible.builtin.rpm_key:
        state: present
        key: https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-9
    
    - name: Install EPEL release on RHEL 9 repo required for Podman
      ansible.builtin.dnf:
        name: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm"
        state: present
        disablerepo:
        - kubernetes
        - crio-o
        
    - name: Ensure EPEL repo is enabled
      ansible.builtin.command: dnf config-manager --enable epel
      when: ansible_distribution == "RedHat" and ansible_distribution_major_version == "9"

    - name: Install Podman
      ansible.builtin.dnf:
        name: podman
        state: present
        disablerepo:
        - kubernetes
        
    - name: Disable SELinux required for Kubernetes components
      ansible.builtin.selinux:
        state: disabled

    - name: Add Kubernetes YUM repository (v1.33)
      ansible.builtin.yum_repository:
        name: kubernetes
        description: Kubernetes v1.33 repo
        baseurl: https://pkgs.k8s.io/core:/stable:/v1.33/rpm/
        enabled: yes
        gpgcheck: yes
        repo_gpgcheck: yes
        gpgkey: https://pkgs.k8s.io/core:/stable:/v1.33/rpm/repodata/repomd.xml.key

    - name: Install Kubernetes components
      ansible.builtin.dnf:
        name:
          - kubeadm
          - kubelet
          - kubectl
        state: present

    - name: Enable and start kubelet
      ansible.builtin.systemd:
        name: kubelet
        enabled: true
        state: started

    - name: Disable swap (required for Kubernetes)
      ansible.builtin.command:
        cmd: swapoff -a
      ignore_errors: true

    - name: Remove swap entry from fstab
      ansible.builtin.lineinfile:
        path: /etc/fstab
        regexp: '^.*swap.*'
        state: absent
        
    - name: Pre-pull nginx image with full registry path
      ansible.builtin.command: podman pull docker.io/library/nginx

    - name: Check if nginx container exists
      ansible.builtin.command: podman container exists nginx-container
      register: nginx_exists
      ignore_errors: true

   # You can remove it if you prefer by enabling the commented play, but make sure to disable the question nginx_exist.rc != 0 next
   # - name: Remove existing nginx container
   #   ansible.builtin.command: podman rm -f nginx-container
   #   ignore_errors: true
    
    - name: Run nginx container if not exists
      ansible.builtin.command: >
        podman run -d --name nginx-container -p 8080:80 docker.io/library/nginx
      when: nginx_exists.rc != 0

    - name: Ensure Podman container is running
      ansible.builtin.command:
        cmd: podman ps -q --filter name=nginx-container
      register: podman_status

    - name: Debug podman status
      ansible.builtin.debug:
        msg: "Nginx Podman container running: {{ podman_status.stdout }}"

    - name: Wait for Podman container to be accessible via curl to check if the container is accessible
      ansible.builtin.wait_for:
        host: "{{ ansible_host }}"
        port: 8080
        delay: 10
        timeout: 30
        state: started
        msg: "Nginx container is not accessible"

    - name: Verify Nginx container is serving content (curl)
      ansible.builtin.command:
        cmd: curl -s http://localhost:8080
      register: curl_response
      retries: 5
      delay: 10
      until: curl_response.stdout == "Welcome to nginx!"
      ignore_errors: true

    - name: Debug curl response
      ansible.builtin.debug:
        msg: "Curl Response: {{ curl_response.stdout }}"

- name: Initialize Kubernetes master node
  hosts: k8smasters
  become: true
  tasks:
    - name: Check if Kubernetes master has been initialized
      ansible.builtin.stat:
        path: /etc/kubernetes/admin.conf
      register: master_initialized
      
    - name: Initialize kubeadm on master node
      ansible.builtin.command:
        cmd: kubeadm init --pod-network-cidr=10.244.0.0/16
      register: kubeadm_init
      when: not master_initialized.stat.exists
      ignore_errors: true

    - name: Set up kubeconfig for the master user
      ansible.builtin.copy:
        content: "{{ kubeadm_init.stdout_lines | join('\n') }}"
        dest: /home/{{ ansible_user }}/.kube/config
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'
      when: not master_initialized.stat.exists

    - name: Install Flannel CNI plugin
      ansible.builtin.command:
        cmd: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
      when: not master_initialized.stat.exists

- name: Join worker node to Kubernetes cluster
  hosts: k8sworkers
  become: true
  tasks:
    - name: Get list of nodes in the cluster
      ansible.builtin.command:
        cmd: kubectl get nodes -o=jsonpath='{.items[*].metadata.name}'
      register: existing_nodes
      ignore_errors: true
    
    - name: Check if worker node is already part of the cluster
      ansible.builtin.set_fact:
        worker_already_joined: "{{ ansible_hostname in existing_nodes.stdout.split(' ') }}"
      when: existing_nodes.stdout is defined
      
    - name: Join worker node to Kubernetes cluster
      ansible.builtin.command:
        cmd: kubeadm join <master_ip>:6443 --token <token> --discovery-token-ca-cert-hash sha256:<hash>
      when: not worker_already_joined and ansible_hostname != 'k8s-master01'

- name: Verify Kubernetes cluster status
  hosts: k8smasters
  become: true
  tasks:
    - name: Check Kubernetes node status
      ansible.builtin.command:
        cmd: kubectl get nodes
