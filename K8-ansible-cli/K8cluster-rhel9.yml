---
- name: Install Kubernetes on RHEL 9
  hosts: all
  become: true
  vars:
    k8s_master_ip: "k8s-master01"  # Update this with your actual master node hostname or IP
    myusername: ""
    mypassword: ""
    mystatus: "present"

  tasks: 
    - name: Register and subscribe the system
      community.general.redhat_subscription:
        username: "{{ myusername }}"
        password: "{{ mypassword }}"
        state: "{{ mystatus }}"
        
    - name: Upgrading all RHEL packages to Latest
      ansible.builtin.dnf:
        name: '*'
        state: latest
        
    - name: Install pip if not present
      ansible.builtin.dnf:
        name: "{{ item }}"
        state: present
      become: true
      loop:
        - python3
        - python3-pip
        - python3-firewall
        - firewalld
        - cri-tools

    - name: Install necessary Python libraries dependencies using pip
      ansible.builtin.pip:
        name:
          - ansible
          - docker
          - kubernetes
          - paramiko
        state: present
        
    - name: Ensure firewalld is started and enabled
      service:
        name: firewalld
        state: stopped
#        enabled: true
  
    - name: Set hostname for the control plane node
      ansible.builtin.hostname:
        name: "k8s-master01"
      when: inventory_hostname == "k8s-master01"

    - name: Set hostname for the worker nodes
      ansible.builtin.hostname:
        name: "k8s-worker{{ ansible_hostname[-2:] }}"
      when: inventory_hostname != "k8s-master01"

    - name: Update /etc/hosts file
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: "{{ ansible_host }} k8s-master01"
      when: inventory_hostname == "k8s-master01"

    - name: Disable swap space on each node
      ansible.builtin.shell:
        cmd: |
          swapoff -a
          sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
      ignore_errors: true  # In case swap isn't enabled
      tags: swap

    - name: Adjust SELinux to permissive mode
      ansible.builtin.command:
        cmd: setenforce 0
      tags: selinux

    - name: Update SELinux configuration to disabled (no more permissive) mode
      ansible.builtin.lineinfile:
        path: /etc/sysconfig/selinux
        regexp: '^SELINUX='
        line: "SELINUX=disabled"
      tags: selinux

#    - name: Open necessary firewall ports for Kubernetes (Control Plane)
#      ansible.builtin.firewalld:
#        permanent: true
#        service: "{{ item }}"
#        state: enabled
#      loop:
#        - 6443/tcp
#        - 2379-2380/tcp
#        - 10250-10252/tcp
#        - 10257-10259/tcp
#        - 179/tcp
#        - 4789/udp
#      when: inventory_hostname == "k8s-master01"

#    - name: Open necessary firewall ports for Kubernetes (Worker Nodes)
#      ansible.builtin.firewalld:
#        permanent: true
#        service: "{{ item }}"
#        state: enabled
#      loop:
#        - 179/tcp
#        - 10250/tcp
#        - 30000-32767/tcp
#        - 4789/udp
#      when: inventory_hostname != "k8s-master01"

#    - name: Reload firewalld to apply changes
#      firewalld:
#        state: reloaded

    - name: Load necessary kernel modules for Kubernetes
      ansible.builtin.shell:
        cmd: |
          echo -e "overlay\nbr_netfilter" | tee /etc/modules-load.d/containerd.conf
          modprobe overlay
          modprobe br_netfilter
      tags: kernel-modules

    - name: Add necessary sysctl parameters for Kubernetes networking
      ansible.builtin.sysctl:
        name: "{{ item }}"
        value: "1"
        state: present
        reload: yes
      loop:
        - net.bridge.bridge-nf-call-iptables
        - net.ipv4.ip_forward
        - net.bridge.bridge-nf-call-ip6tables
      tags: sysctl

    - name: Install Docker repository (for containerd)
      ansible.builtin.shell:
        cmd: dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
      tags: containerd-repo

    - name: Install containerd
      ansible.builtin.dnf:
        name: containerd.io
        #  - cni-plugins
        state: present
      tags: containerd

    - name: Create containerd default config
      shell: "containerd config default > /etc/containerd/config.toml"
      args:
        creates: /etc/containerd/config.toml

    - name: Overwrite containerd config.toml
      ansible.builtin.copy:
        dest: /etc/containerd/config.toml
        content: |
          #   Copyright 2018-2022 Docker Inc.

          #   Licensed under the Apache License, Version 2.0 (the "License");
          #   you may not use this file except in compliance with the License.
          #   You may obtain a copy of the License at

          #       http://www.apache.org/licenses/LICENSE-2.0

          #   Unless required by applicable law or agreed to in writing, software
          #   distributed under the License is distributed on an "AS IS" BASIS,
          #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
          #   See the License for the specific language governing permissions and
          #   limitations under the License.

          enabled_plugins = ["cri"]
          [plugins."io.containerd.grpc.v1.cri".containerd]
            endpoint = "unix:///var/run/containerd/containerd.sock"

          #disabled_plugins = ["cri"]

          #root = "/var/lib/containerd"
          #state = "/run/containerd"
          #subreaper = true
          #oom_score = 0

          #[grpc]
          #  address = "/run/containerd/containerd.sock"
          #  uid = 0
          #  gid = 0

          #[debug]
          #  address = "/run/containerd/debug.sock"
          #  uid = 0
          #  gid = 0
          #  level = "info"
          SystemdCgroup = true
        owner: root
        group: root
        mode: '0644'

    - name: Configure crictl.yaml
      ansible.builtin.copy:
        dest: /etc/crictl.yaml
        content: |
          runtime-endpoint: unix:///var/run/containerd/containerd.sock
      tags: crictl-config

    - name: Configure /etc/cni/net.d/10-containerd.conf
      ansible.builtin.copy:
        dest: /etc/cni/net.d/10-containerd.conf
        content: |
          {
            "cniVersion": "0.4.0",
            "name": "containerd-network",
            "type": "bridge",
            "bridge": "cni0",
            "isGateway": true,
            "ipMasq": true,
            "ipam": {
              "type": "host-local",
              "subnet": "10.1.0.0/16",
              "rangeStart": "10.1.0.10",
              "rangeEnd": "10.1.0.50",
              "gateway": "10.1.0.1"
            }
          }
      tags: crictl-10-containerd

 #   - name: Comment out 'disabled_plugins = ["cri"]'
 #     ansible.builtin.lineinfile:
 #       path: /etc/containerd/config.toml
 #       regexp: '^(\s*)disabled_plugins\s*=\s*\["cri"\]'
 #       line: '# \g<0>'
 #       backrefs: yes

 #   - name: Ensure enabled_plugins and grpc cri plugin config are present
 #     ansible.builtin.blockinfile:
 #       path: /etc/containerd/config.toml
 #       marker: "# {mark} ANSIBLE MANAGED BLOCK - containerd cri config"
 #       block: |
 #         enabled_plugins = ["cri"]
 #         [plugins."io.containerd.grpc.v1.cri".containerd]
 #           endpoint = "unix:///var/run/containerd/containerd.sock"
 #       insertafter: EOF
        
    - name: Ensure Systemd cgroup is set in containerd config
      replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'

    - name: Restart containerd service
      ansible.builtin.systemd:
        name: containerd
        state: restarted
        enabled: true
      tags: containerd

    - name: Return pip3 version
      ansible.builtin.command: pip3 -V
      register: pip_result

    - name: Return containerd version
      ansible.builtin.command: containerd --version
      register: cont_result

    - name: Return crictl info
      ansible.builtin.command: crictl info
      register: crictl_result
      
    - name: Show pip, contained version, and crictl version
      ansible.builtin.debug:
        msg: "The {{ pip_result }}, containerd {{ cont_result }} version and Crictl information is: {{ crictl_result }}"

    - name: Install Kubernetes repository
      ansible.builtin.copy:
        dest: /etc/yum.repos.d/kubernetes.repo
        content: |
          [kubernetes]
          name=Kubernetes
          baseurl=https://pkgs.k8s.io/core:/stable:/v1.33/rpm/
          enabled=1
          gpgcheck=1
          gpgkey=https://pkgs.k8s.io/core:/stable:/v1.33/rpm/repodata/repomd.xml.key
          exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni
      tags: kubernetes-repo

    - name: Uninstall Kubernetes tools (kubelet, kubeadm, kubectl)
      ansible.builtin.dnf:
        name: 
          - kubelet
          - kubeadm
          - kubectl
        state: absent
      tags: kubernetes-tools-uninstall

    - name: Install Kubernetes tools (kubelet, kubeadm, kubectl)
      ansible.builtin.dnf:
        name: 
          - kubelet
          - kubeadm
          - kubectl
        state: present
        disable_gpg_check: yes
        disable_excludes: kubernetes  # Allow install despite exclude
      tags: kubernetes-tools

    - name: Enable kubelet service
      ansible.builtin.systemd:
        name: kubelet
        state: started
        enabled: true
      tags: kubelet

    - name: Check if Kubernetes is already initialized
      stat:
        path: /etc/kubernetes/admin.conf
      register: kubeadm_already_initialized
      
    - name: Initialize Kubernetes master node
      ansible.builtin.shell:
        cmd: kubeadm init --control-plane-endpoint=k8s-master01
      when: inventory_hostname == "k8s-master01"
      register: kubeadm_init_output and not kubeadm_already_initialized.stat.exists
      tags: kubeadm-init

    - name: Copy Kubeadm config file to user's home directory
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ ansible_env.HOME }}/.kube/config"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
        remote_src: true
      when: inventory_hostname == "k8s-master01"
      # and kubeadm_already_initialized.stat.exists or
      #      (not kubeadm_already_initialized.stat.exists and ansible_facts['ansible_user'] != 'root')
      tags: kube-config

    - name: Join Kubernetes worker node to the cluster
      ansible.builtin.shell:
        cmd: "kubeadm join k8s-master01:6443 --token {{ kubeadm_init_output.stdout_lines[0] }} --discovery-token-ca-cert-hash {{ kubeadm_init_output.stdout_lines[1] }}"
      when: inventory_hostname != "k8s-master01"
      tags: kubeadm-join

  handlers:
    - name: restart containerd
      ansible.builtin.systemd:
        name: containerd
        state: restarted
